@{
    var regionId = (string)ViewData["LandId"];
    regionId = System.Web.HttpUtility.HtmlDecode(regionId);
}
@{
    Layout = "~/Views/Shared/_AdminTemplate.cshtml";
    string CurrentPage=(string)ViewData["CurrentPage"];
    string LandId = (string)ViewData["LandId"];
}
@section Head {   
    <script type="text/javascript" src="~/js/dateTimeFromat.js"></script>
    <script type="text/javascript" src="~/js/json.js"></script>
    <script type="text/javascript" src="~/js/TianDiTuMapLoaderAdmin.js"></script>
    <script type="text/javascript" src="http://api.tianditu.gov.cn/api?v=4.0&tk=2a7c617cd0353e40d0fee73327920948"></script>
    <link rel="stylesheet" href="~/css/LandManage.css" />
}
@section PageBody {
    <el-row style="width:98%;margin:0 auto;" class="page-cont search-container">
        <el-col :span="24" class="page-cont">
            <div class="alarm-header">
                <el-button icon="el-icon-caret-left" @@click="gotoNewHome" type="success" round>返回首页</el-button>
                <div class="site-header-input">
                    <el-input v-model="searchWhere" placeholder="请输入地块儿名称或所属乡镇" stlye="width:300px"></el-input>
                    <input type="hidden" id="landId" value="@LandId" />
                </div>
                <div class="selectLevel">
                    <el-select v-model="searchLevel" placeholder="请选择地块儿级别" >
                        <el-option v-if="searchLevelOptions!=null&&searchLevelOptions.length>0"
                          v-for="item in searchLevelOptions"
                          :key="item.value"
                          :label="item.label"
                          :value="item.value"
                        >
                        </el-option>
                        <el-option v-else label="没有数据" value=""></el-option>
                    </el-select>
                </div>
                <el-button @@click="search" class="el-button-sm" >搜索</el-button>
                <el-button @@click="showAddDialog" class="el-button-sm" >添加</el-button>
                <el-button @@click="deleteOscRegionInfo" class="el-button-sm el-button--danger" >删除</el-button>
                <el-button @@click="importExcel" class="el-button-sm" >导入Excel</el-button>
                <el-button @@click="exportExcel" class="el-button-sm" >导出Excel</el-button>
                <a href="/template/oscregionTemplate.xls" title="下载导入模板">下载导入模板</a>
                <input type="file" id="uploadExcel" style="display:none" />
            </div>
        </el-col>
    </el-row>
    <el-row style="width:98%;margin:0 auto;overflow:hidden;height:70vh;" class="page-cont search-result-container">
        <el-table :data="PageData"
            tooltip-effect="dark"
            class="el-datatable"
            @@selection-change="handleSelectionChange"
            height="90%">
            <el-table-column label="全选" type="selection" width="50"></el-table-column>
            <el-table-column label="操作" width="180">
                <template slot-scope="scope">
                    <!--这个是整行设置序号-->
                    <!--<span style="margin-left: 10px">{{scope.$index + 1}}</span>-->
                    <el-button @@click="showEditDialog(scope.row)" style="line-height:1vh" class="companyInfo-eltable-button" round type="primary">修改</el-button>
                </template>
            </el-table-column>
            <el-table-column show-overflow-tooltip prop="id" label="编号" align="center"></el-table-column>
            <el-table-column show-overflow-tooltip prop="name" label="地块儿名称" align="center"></el-table-column>
            <el-table-column show-overflow-tooltip prop="parent_id" label="上级地块儿编号" align="center"></el-table-column>
            <el-table-column show-overflow-tooltip prop="citycode" label="城市编号" align="center"></el-table-column>
            <el-table-column show-overflow-tooltip prop="adcode" label="区号" align="center"></el-table-column>
            <el-table-column show-overflow-tooltip prop="center" label="中心点坐标" align="center"></el-table-column>
            <el-table-column show-overflow-tooltip prop="level" label="地块儿级别" align="center"></el-table-column>
        </el-table>
    </el-row>
    <el-row class="page-cont search-page-container">
        <el-pagination class="el-pagination-center"
                       :total="recordCount"
                       :page-sizes="[10, 15, 20]"
                       :page-size="pageSize"
                       :page-count="pageCount"
                       :current-page="pageIndex"
                       @@current-change="changePage"
                       @@size-change="changePageSize"
                       layout="total, sizes, prev, pager, next, jumper">
         </el-pagination>
    </el-row>
    <iframe :src="exportSrc==''?'about:blank':exportSrc" style="display:none"></iframe>
    <el-dialog :visible.sync="dialogEditVisible" custom-class="landManageEditDialog" title="地块儿信息编辑" >
        <div class="dialogDiv">
            <div class="inputDiv">
                <div class="txtLandId-Container">
                    <el-input :readonly="true"  placeholder="请输入地块儿编号" v-model="editObj.landId">
                        <template slot="prepend">编号</template>
                    </el-input>
                </div>
                <div class="txtLandName-Container">
                    <el-input placeholder="请输入地块儿名称" v-model="editObj.landName">
                        <template slot="prepend">名称</template>
                    </el-input>
                </div>
                <div class="txtLandParent-Container">
                    <el-select 
                      placeholder="请选择或输入上级地块儿" 
                      v-model="editObj.parent_landName"
                      filterable
                      remote
                      clearable 
                      :loading="ParentLandListLoading"
                      :remote-method="queryParentLandSearchAsync"
                    >
                        <el-option 
                           v-for="item in ParentLandList"
                           :key="item.value"
                           :label="item.label"
                           :value="item.value">
                        </el-option>
                        <el-option v-if="ParentLandList==null||ParentLandList.length<=0" label="请选择或输入上级地块儿" value=""></el-option>
                    </el-select>
                </div>
                <div class="txtLandCityCode-Container">
                    <el-input placeholder="请输入城市编号" v-model="editObj.citycode">
                        <template slot="prepend">城市编号</template>
                    </el-input>
                </div>
                <div class="txtLandAdcode-Container">
                    <el-input placeholder="请输入区号" v-model="editObj.adcode">
                        <template slot="prepend">区号</template>
                    </el-input>
                </div>
                <div class="txtLandLevel-Container">
                    <el-select placeholder="地块儿级别" v-model="editObj.level">
                        <el-option v-if="searchLevelOptions!=null&&searchLevelOptions.length>0"
                          v-for="item in searchLevelOptions"
                          :key="item.value"
                          :label="item.label"
                          :value="item.value"
                        >
                        </el-option>
                        <el-option v-else label="没有数据" value=""></el-option>
                    </el-select>
                </div>
                <div class="txtLandCenterLng-Container">
                    <el-input placeholder="请输入中心坐标经度" v-model="editObj.center_lng">
                        <template slot="prepend">中心经度</template>
                    </el-input>
                </div>
                <div class="txtLandCenterLat-Container">
                    <el-input placeholder="请输入中心坐标纬度" v-model="editObj.center_lat">
                        <template slot="prepend">中心纬度</template>
                    </el-input>
                </div>
                <div @@click="saveOscRegionData" class="btnSaveData">
                    保存地块儿数据
                </div>
                <div class="ddlSelectRootLand">
                    <el-select 
                          placeholder="请选择或输入根地块儿" 
                          v-model="RootLandId"
                          filterable
                          remote
                          clearable 
                          :loading="RootLandListLoading"
                          :remote-method="queryRootLandSearchAsync"
                    >
                        <el-option 
                           v-for="item in RootLandList"
                           :key="item.value"
                           :label="item.label"
                           :value="item.value">
                        </el-option>
                        <el-option v-if="RootLandList==null||RootLandList.length<=0" label="请选择或输入根地块儿" value=""></el-option>
                    </el-select>
                </div>
                <div @@click="SetRootLand" class="btnSetRootLand">
                    设置根地块儿
                </div>
            </div>
            <div class="mapContainer" id="MapContainer">
            </div>
        </div>
    </el-dialog>
    <el-dialog :visible.sync="dialogColorVisible" custom-class="polygonColorDialog" title="地块儿颜色选择" >
        <div class="dialogDiv">
            <div v-for="(item,index) in PolygonColor" 
                 :key="index" 
                 :style="'background-color:#'+item"
                 @@click="setPolygonColor(item)"
                 class="itemColor">
                 {{item}}
             </div>
        </div>
    </el-dialog>
}
@section VueScript {
    <script>
        var main = new Vue({
            el: "#dataManage-main",
            data:{
                 dialogColorVisible:false,
                 dialogEditVisible:false,
                 exportSrc:'',
                 searchLevel:'',
                 searchLevelOptions:[],
                 screenWidth: null,
                 screenHeight: null,
                 userName: "",
                 timestr: "",
                 datestr: "",
                 menuModels:[],
                 hideMenus:[],
                 CurrentPage:'@CurrentPage',
                 currentModelsId:1,
                 timeHandle:null,
                 searchWhere:'',
                 userInfo:{
                     Account:'',
                     CompanyId:'',
                     Level:''
                 },
                 pageParameter:{
                     where:'',
                     level:'',
                     pageIndex:'',
                     pageSize:'',
                     sortField:'id',
                     sortMethod:'desc'
                 },
                 menuTemplate:'',
                 recordCount:0,
                 pageSize:10,
                 pageCount:0,
                 pageIndex:1,
                 PageData:null,
                 importExcelLogDialog:false,
                 importExcelLogText:'',
                 editObj:{
                     id:'',
                     landId:'',
                     landName:'',
                     citycode:'',
                     adcode:'',
                     level:'',
                     parent_id:'',
                     parent_landName:'',
                     center_lng:'',
                     center_lat:''
                 },
                 RootLandId:'',
                 editLandId:'',
                 ParentLandListLoading:true,
                 ParentLandList:[],
                 RootLandListLoading:true,
                 RootLandList:[],
                 saveMethod:"Add",
                 SelectionIDStr:'',
                 RootLand:null,
                 PolygonColor:[
                     '31b317',
                     '0cabd2',
                     '710ba6',
                     '1329b1',
                     'e1cb13',
                     'dc900a',
                     'a2c30b',
                     '0077d5',
                     '024db6'
                 ]
            },
            mounted:function(){
                 this.screenWidth = document.body.clientWidth;
                 this.screenHeight = document.body.clientHeight;
                 this.GetAllRegionLevel();
                 this.getToken();
                 this.initModules();
                 this.replaceGotoMenu(this.CurrentPage);
                 this.getLoginAccountUserInfo();
                 this.userName=cookieHelper.get("loginUserName");
                 this.showDateTimeClock();
                 this.getPageData();
                 this.GetRootLand();
                 viewAllEvent=this.viewAllLand;
                 viewReturnEvent=this.viewReturnLand;
                 selectPolygonColorShowDialog=this.showPolygonColorDialog;
            },
            methods:{
                setPolygonColor(colorValue){
                    var _that=this;
                    if (currentPolygon != null){
                        currentPolygon.setFillColor('#'+colorValue);
                        currentPolygon.setFillOpacity(0.9);
                    }
                    _that.dialogColorVisible=false;
                },
                //弹出地块儿颜色选择对话框
                showPolygonColorDialog(){
                    var _that=this;
                    _that.dialogColorVisible=true;
                },
                viewReturnLand(){
                    clearOverLays();
                    allPolygon = [];
                    this.InitLandMapLoader();
                },
                viewAllLand(){
                    var _that=this;
                    console.log("viewAllLand");
                    console.log("_that.RootLand");
                    console.log(_that.RootLand);
                    if(_that.RootLand==null){
                        alert('没有设置根地块儿不能查看全部');
                        return false;
                    }
                    apiHelper.GetAllRegionGisByRootLand(
                        _that.RootLand.id.toString(),
                        function(response){
                            if(response.data.status==0){
                                clearOverLays();
                                allPolygon = [];
                                var resultAry=response.data.result;
                                for(var i=0;i<resultAry.length;i++){
                                    if(resultAry[i].gpsLocations!="")
                                       drawLandPolygon(eval(resultAry[i].gpsLocations));
                                }
                            }
                        }
                    );
                },
                GetRootLand(){
                    var _that=this;
                    apiHelper.GetRootLand(
                        function(response){
                            if(response.data.status==0){
                                _that.RootLand=response.data.result;
                                if(_that.RootLand!=null)
                                {
                                   _that.RootLandId=_that.RootLand.name;
                                   adminRootLandId=_that.RootLand.id;
                                }
                            }
                        }
                    );
                },
                SetRootLand(){
                    var _that=this;
                    if(_that.RootLandId==''){
                        alert('没有选择根地块儿,不能设置');
                        return false;
                    }
                    console.log("_that.RootLandId="+_that.RootLandId);
                    if(_that.RootLandId==_that.RootLand.name)
                       _that.RootLandId=_that.RootLand.id;
                    apiHelper.SetRootLand(
                        _that.RootLandId,
                        function(response){
                            if(response.data.status!=0)
                               alert("设置根地块儿出错,原因["+response.data.msg+"]");
                            else
                               alert("设置成功");
                        }
                    );
                },
                handleSelectionChange(val){
                    var _that = this;
                    _that.SelectionIDStr = "";
                    for (var i = 0; i < val.length; i++) {
                        _that.SelectionIDStr += val[i].id + "-";
                    }
                    if (_that.SelectionIDStr != "")
                        _that.SelectionIDStr = _that.SelectionIDStr.substr(0, _that.SelectionIDStr.length - 1);
                },
                deleteOscRegionInfo() {
                    var _that = this;
                    var IDStr = _that.SelectionIDStr;
                    _that.getLoginAccountUserInfo();
                    if(_that.userInfo.Level>3)
                    {
                        alert('用户权限不足');
                        return false;
                    }
                    if (IDStr == "") {
                        alert("请先选择至少一条数据");
                        return;
                    }
                    if (confirm("确定删除选中的数据吗\n\t[注意:地块儿范围数据将同时被删除]?")) {
                        apiHelper.OscRegionDelete(
                            IDStr,
                            function(response) {
                                if (response.data.status == 0) {
                                    _that.pageIndex = 1;
                                    _that.getPageData();
                                }
                            }
                        );
                    }
                },
                saveOscRegionData(){
                    var _that=this;
                    console.log("saveOscRegionData");
                    console.log(_that.editObj);
                    console.log(_that.saveMethod);
                    apiHelper.saveOscRegion(
                        {
                          id:_that.editObj.id,
                          name:_that.editObj.landName,
                          parent_id:_that.editObj.parent_id==""?_that.editObj.parent_landName:_that.editObj.parent_id,
                          citycode:_that.editObj.citycode,
                          adcode: _that.editObj.adcode,
                          center: _that.editObj.center_lng+","+_that.editObj.center_lat,
                          level: _that.editObj.level
                        },
                        _that.userName,
                        _that.saveMethod,
                        function(response){
                            if(response.data.status==0)
                            {
                                console.log("saveOscRegion");
                                console.log(allPolygon);
                                var identity=response.data.result;
                                _that.editObj.id=identity;
                                if(allPolygon!=null&&allPolygon.length>0){
                                    var saveRegionGisAry=[];
                                    for(var i=0;i<allPolygon.length;i++){
                                        var gpsLocationsAry=allPolygon[i].getLngLats()[0];
                                        var gpsLocations="";
                                        console.log(gpsLocationsAry);
                                        if(gpsLocationsAry!=null&&gpsLocationsAry.length>0){
                                            for(var j=0;j<gpsLocationsAry.length;j++){
                                                var gpsLocationStr="["+gpsLocationsAry[j].lng+","+gpsLocationsAry[j].lat+"],";
                                                gpsLocations+=gpsLocationStr;
                                            }
                                            gpsLocations="["+gpsLocations.substring(0,gpsLocations.length-1)+"]";
                                        }
                                        saveRegionGisAry.push({
                                            landId:_that.editObj.id.toString(),
                                            gpsLocations: gpsLocations,
                                            color:allPolygon[i].getFillColor()
                                        });
                                    }
                                    console.log("saveRegionGisAry");
                                    console.log(saveRegionGisAry);
                                    apiHelper.saveRegionGis(
                                            saveRegionGisAry,
                                            function(response){
                                                console.log("saveRegionGis");
                                                console.log(response);
                                                if(response.data.status==0){
                                                    alert('保存成功');
                                                    _that.dialogEditVisible=false;
                                                    _that.search();
                                                }
                                            }
                                    );
                                }else{
                                    alert('保存成功');
                                    _that.dialogEditVisible=false;
                                    _that.search();
                                }
                            }
                        }
                    )
                },
                loadParentLand(){
                    var _that=this;
                    var resultCount=10;
                    var sortField = "id";
                    var sortMethod = "DESC";
                    console.log("loadParentLand");
                    console.log(_that.editObj.parent_id);
                    apiHelper.OscRegionAutoComplate(
                        _that.editObj.parent_id,
                        "",
                        resultCount,
                        sortField,
                        sortMethod,
                        function(response){
                            console.log("OscRegionAutoComplate");
                            console.log(response);
                            _that.RootLandListLoading=false;
                            if(response.data.status==0){
                                var resultAry=response.data.result;
                                if(resultAry!=null&&resultAry.length>0){
                                    _that.editObj.parent_landName=resultAry[0].name;
                                }
                            }
                        }
                    );
                },
                queryRootLandSearchAsync(queryString){
                    var _that=this;
                    var resultCount=10;
                    var sortField = "id";
                    var sortMethod = "DESC";
                    console.log("queryRootLandSearchAsync");
                    console.log(queryString);
                    _that.RootLandListLoading=true;
                    _that.RootLandList=[];
                    apiHelper.OscRegionAutoComplate(
                        "-1",
                        queryString,
                        resultCount,
                        sortField,
                        sortMethod,
                        function(response){
                            console.log("OscRegionAutoComplate");
                            console.log(response);
                            _that.RootLandListLoading=false;
                            if(response.data.status==0){
                                var resultAry=response.data.result;
                                if(resultAry!=null&&resultAry.length>0){
                                    for(var i=0;i<resultAry.length;i++){
                                        _that.RootLandList.push({
                                            label:resultAry[i].name,
                                            value:resultAry[i].id
                                        });
                                    }
                                }
                            }
                        }
                    );
                },
                queryParentLandSearchAsync(queryString){
                    var _that=this;
                    resultCount=10;
                    var sortField = "id";
                    var sortMethod = "DESC";
                    console.log("queryParentLandSearchAsync");
                    console.log(queryString);
                    _that.ParentLandListLoading=true;
                    _that.ParentLandList=[];
                    apiHelper.OscRegionAutoComplate(
                        "-1",
                        queryString,
                        resultCount,
                        sortField,
                        sortMethod,
                        function(response){
                            console.log("OscRegionAutoComplate");
                            console.log(response);
                            _that.ParentLandListLoading=false;
                            if(response.data.status==0){
                                var resultAry=response.data.result;
                                if(resultAry!=null&&resultAry.length>0){
                                    for(var i=0;i<resultAry.length;i++){
                                        _that.ParentLandList.push({
                                            label:resultAry[i].name,
                                            value:resultAry[i].id
                                        });
                                    }
                                }
                            }
                        }
                    )
                },
                InitLandMapLoader(){
                    var _that=this;
                    _that.$nextTick(function(){
                        InitMapLoader(
                            "MapContainer",
                            function(map){
                                if(_that.editLandId!='')
                                   _that.GetRegionGISByLandId(_that.editLandId);
                            }
                        );
                    });
                },
                GetRegionGISByLandId(landId){
                    var _that=this;
                    apiHelper.GetRegionGISByLandId(
                        landId,
                        function(response){
                            if (response.data.status == 0){
                                console.log("GetRegionGISByLandId");
                                console.log(response.data.result);
                                var resultAry=response.data.result;
                                if(resultAry!=null&&resultAry.length>0)
                                {
                                   for(var i=0;i<resultAry.length;i++){
                                       if(resultAry[i].gpsLocations!="")
                                          drawLandPolygon(eval(resultAry[i].gpsLocations),resultAry[i].color);
                                   }
                                }
                            }
                        }
                    );
                },
                initEditObj(){
                    var _that=this;
                    for(var PName in _that.editObj){
                        if(PName!="function")
                           _that.editObj[PName]="";
                    }
                },
                showAddDialog(){
                    var _that=this;
                    _that.saveMethod="Add";
                    _that.editLandId='';
                    _that.showEditDialogFinal(null);  
                    _that.InitLandMapLoader();
                    _that.initEditObj();
                    clearOverLays();
                },
                showEditDialog(editObj){
                    var _that=this;
                    _that.saveMethod="Edit";
                    _that.showEditDialogFinal(editObj);
                },
                showEditDialogFinal(editObj){
                    var _that=this;
                    console.log("showEditDialog");
                    console.log(editObj);                      
                    if(editObj!=null)
                    {
                       _that.editLandId=editObj.id;
                       _that.editObj.id=editObj.id;
                       _that.editObj.landId=editObj.id;
                       _that.editObj.landName=editObj.name;
                       _that.editObj.citycode=editObj.citycode;
                       _that.editObj.adcode=editObj.adcode;
                       _that.editObj.level=editObj.level;
                       _that.editObj.parent_id=editObj.parent_id;
                       _that.editObj.center_lng=editObj.center.split(',')[0];
                       _that.editObj.center_lat=editObj.center.split(',')[1];
                       _that.loadParentLand();
                    }
                    _that.dialogEditVisible=true;
                    _that.InitLandMapLoader();
                    if(editObj!=null)
                       _that.GetRegionGISByLandId(_that.editLandId);
                },
                exportExcel() {
                     var _that=this;
                     var selectedIDStr = _that.SelectionIDStr==''||typeof(_that.SelectionIDStr)=='undefined'?'null':_that.SelectionIDStr;
                     var searchWhere = _that.searchWhere==''||typeof(_that.searchWhere)=='undefined'?'null':_that.searchWhere;
                     var level=_that.searchLevel==''||typeof(_that.searchLevel)=='undefined'?'null':_that.searchLevel;
                     if (_that.recordCount <= 0) 
                     {
                         alert('没有数据不能导出');
                         return false;
                     }
                     _that.exportSrc = apiHelper.urlHost + '/osc-region/ExportExcel?selectedIDStr=' + selectedIDStr + '&where=' + searchWhere+'&level='+level;
                 },
                 search(){
                     this.pageIndex = 1;
                     this.getPageData();
                 },
                 GetAllRegionLevel(){
                     var _that = this;
                     _that.searchLevelOptions=[];
                     apiHelper.GetAllRegionLevel(
                         function(response){
                             if(response.data.status==0){
                                 var resultArry=response.data.result;
                                 resultArry.unshift({
                                     key:"全部",
                                     value:"全部"
                                 });
                                 _that.searchLevelOptions=resultArry;
                             }
                         }
                     );
                 },
                 importExcel(){
                    var _that=this;
                    var uploadExcel=$("#uploadExcel");
                    var file=null;
                    uploadExcel.click();
                    $("#uploadExcel").change(function(e){
                      //console.log("#uploadExcel");
                      //console.log(e);
                      if(e.target.files==null||e.target.files.length<=0){
                         alert('没有选择文件不能上传');
                         return false;
                      }
                      file=e.target.files[0];
                      if(file.size/1024/1024>_that.limitExcelFileSize){
                          alert("文件上传最大"+_that.limitExcelFileSize+"mb");
                          return false;
                      }
                      apiHelper.importOscRegionExcel(
                          _that.userName,
                          "uploadExcel",
                          function(response){
                              //console.log(response);
                              if(response.data.status!=0){
                                  _that.importExcelLogDialog=true;
                                  _that.importExcelLogText=response.data.msg;
                              }else if(response.data.status==0){
                                  alert("导入成功");
                                  _that.pageIndex=1;
                                  _that.getPageData();                                  
                              }
                          }
                       );
                    });         
                 },                 
                 replaceGotoMenu(currentMenu){
                    var resultHtml='';
                    if(this.menuTemplate=='')
                       this.menuTemplate=$(".goto-page-menu").html();
                    resultHtml=this.menuTemplate;
                    //console.log("resultHtml="+resultHtml);
                    switch(currentMenu)
                    {
                        case 'NewHome':
                             resultHtml=resultHtml.replace('CurrentMenu','产业信息管理');
                             //console.log("resultHtml="+resultHtml);
                             $(".goto-page-menu").html(resultHtml);
                        break;
                        case 'CompanyMaster':
                             resultHtml=resultHtml.replace('CurrentMenu','公司信息管理');
                             //console.log("resultHtml="+resultHtml);
                             $(".goto-page-menu").html(resultHtml);
                        break;
                        case 'LandManage':
                             resultHtml=resultHtml.replace('CurrentMenu','地块儿管理');
                             //console.log("resultHtml="+resultHtml);
                             $(".goto-page-menu").html(resultHtml);
                        break;
                    }
                 },
                 gotoNewHome() {
                     window.location = "/NewHome/NewHome?regionId=@LandId";
                 },
                 getPageData(){
                     var _that = this;
                     _that.pageParameter.pageIndex=_that.pageIndex.toString();
                     _that.pageParameter.pageSize=_that.pageSize.toString();
                     _that.pageParameter.where=_that.searchWhere;
                     _that.pageParameter.level=_that.searchLevel;
                     if(_that.searchLevel=="全部")
                        _that.pageParameter.level="";
                     apiHelper.OscRegionPage(
                         _that.pageParameter,
                         function(response){
                             console.log("getPageData");
                             console.log(response);
                             _that.PageData=response.data.result;
                             _that.recordCount=response.data.recordCount;
                             _that.pageCount=response.data.pageCount;
                         }
                      );
                  },
                  //el-table 动态计算高度为了显示滚动条
                  elTableScroll() {
                      this.$nextTick(function() {
                          if ($(".el-table__body-wrapper").length > 0 && $(".el-table__header-wrapper").length > 0) {
                              $(".el-table__body-wrapper").each(function(index,element){
                                  var parentElement = $(element).parent().parent();
                                  var headerHeight = $(element).prev()[0].offsetHeight;
                                  var parentHeight = parentElement[0].offsetHeight;
                                  var elBodyHeight = parentHeight - headerHeight;
                                  $(element).css("height", elBodyHeight + "px");
                              });
                          }
                      });
                  },
                  changePageSize(pageSize) {
                      this.pageIndex = 1;
                      this.pageSize = pageSize;
                      this.getPageData();
                  },
                  changePage(pageIndex) {
                      this.pageIndex = pageIndex;
                      this.getPageData();
                  },
                  //#region 初始化页面模块
                  initModules() {
                      //this.clearCookie();
                      console.log("initModules");
                      var _that=this;
                      var modules=window.localStorage[_that.userName+'modules'];
                      window.localStorage.removeItem(this.userName+'modules');
                      modules=null;
                      if(modules==null||modules.length<=0||typeof(modules)=='undefined')
                      {
                          /*apiHelper.getModules(
                              function(response)
                              {
                                  console.log("getModules");
                                  console.log(response);
                                  var modulesResult=response.data.result;
                                  if(response.data.status==0){
                                      if(modulesResult!=null&&modulesResult.length>0&&typeof(modulesResult)!='undefined')
                                      {
                                          _that.menuModels=modulesResult;
                                          _that.fillMenuModelsArray();
                                          window.localStorage.setItem(_that.userName+'modules',JSON.stringify(_that.menuModels));
                                      }
                                      else
                                      {
                                          _that.readLocalModules();
                                          _that.fillMenuModelsArray();
                                      }
                                  }
                              }
                          );*/
                          _that.readLocalModules();
                          _that.fillMenuModelsArray();
                      }
                      else
                      {
                          _that.menuModels=JSON.parse(modules);
                          _that.fillMenuModelsArray();
                      }
                  },
                  readLocalModules(){
                      var _that=this;
                      $.getJSON(
                          "/MainMenuModels.json",
                          function(jsonData){
                              console.log("readLocalModules");
                              console.log(jsonData);
                              _that.menuModels=jsonData.menuModels;
                              _that.readLocalHideMenus();
                          }
                      );
                  },
                  fillMenuModelsArray(){
                      var _that=this;
                      console.log("fillMenuModelsArray");
                      console.log(_that.menuModels);
                      if(_that.menuModels==null||typeof(_that.menuModels)=="undefined"||_that.menuModels.length<5)
                         return false;
                      for(var i=5;i<_that.menuModels.length;i++){
                          if(_that.currentModelsId==_that.menuModels[i].id){
                              _that.menuModels[i].uri="#";
                          }
                          _that.hideMenus.push(_that.menuModels[i]);
                      }
                  },
                  readLocalHideMenus(){
                      var _that=this;
                      $.getJSON(
                          "/HideMenus.json",
                          function(jsonData){
                              console.log("readLocalHideMenus");
                              console.log(jsonData);
                              _that.hideMenus=jsonData.hideMenus;
                          }
                      );
                  },
                  //#endregion
                  showDateTimeClock() {
                      var _that = this;
                      var nowDate = new Date();
                      var hours = _that.fixLeadingZero(nowDate.getHours(), 2);
                      var minutes = _that.fixLeadingZero(nowDate.getMinutes(), 2);
                      var seconds = _that.fixLeadingZero(nowDate.getSeconds(), 2);
                      var month = _that.fixLeadingZero(nowDate.getMonth() + 1, 2);
                      var day = _that.fixLeadingZero(nowDate.getDate(), 2);
                      if(_that.timeHandle!=null)
                         window.clearInterval(_that.timeHandle);
                      _that.timestr = hours + ":" + minutes + ":" + seconds;
                      _that.datestr = nowDate.getFullYear() + "/" + month + "/" + day;
                      _that.timeHandle=window.setInterval(function() {
                          _that.showDateTimeClock();
                      }, 1000);
                  },
                 fixLeadingZero(value, fixLength) {
                     var str = value.toString();
                     if (str.length < fixLength) {
                         var len = fixLength - str.length;
                         var tempStr = "";
                         for (var i = 0; i < len; i++)
                              tempStr += "0";
                         str = tempStr + str;
                     }
                     return str;
                 },
                 getLoginAccountUserInfo() {
                     this.userInfo.Account = apiHelper.getCookie("account");
                     this.userInfo.CompanyId = apiHelper.getCookie("companyId");
                     this.userInfo.Level = apiHelper.getCookie("level");
                     this.userName = this.userInfo.Account;
                 },
                 getToken() {
                     this.getLoginAccountUserInfo();
                     var token = apiHelper.getCookie("token");
                     var level=apiHelper.getCookie("level");
                     var result = true;
                     if (this.userInfo.Account == null) {
                         result = false;
                     } else {
                         apiHelper.token = token;
                         apiHelper.level = level;
                         //console.log("apiHelper.level="+apiHelper.level);
                         if(apiHelper.level>3){
                             alert('用户权限不足');
                             result=false;
                         }
                     }
                     return result;
                 },
                 showMoreMenu(){
                     if ($(".pop-more-maste-menu").css("display") == "none")
                         $(".pop-more-maste-menu").show();
                 },
                 hideMoreMenu(){
                     if ($(".pop-more-maste-menu").css("display") != "none")
                         $(".pop-more-maste-menu").hide();
                 },
                 //退出登录，取消cookie有效时间
                 exitLogin() {
                     //console.log(123);
                     var exp = new Date();
                     exp.setTime(exp.getTime() - 10);
                     document.cookie = "token=" + escape('echo') + ";expires=" + exp.toGMTString() + ";path=/";
                     window.localStorage.removeItem(this.userName+'modules');
                     window.location = "/Login/Login";
                 }
            }
        });
    </script>
}
